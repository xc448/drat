// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calInheritanceProb
arma::Cube<double> calInheritanceProb(const arma::Mat<int>& possGenotypes);
RcppExport SEXP _PanelPRO_calInheritanceProb(SEXP possGenotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type possGenotypes(possGenotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(calInheritanceProb(possGenotypes));
    return rcpp_result_gen;
END_RCPP
}
// calPrevalences
arma::Mat<double> calPrevalences(const arma::Mat<double>& margPrevs, const arma::Mat<int>& possGenotypes);
RcppExport SEXP _PanelPRO_calPrevalences(SEXP margPrevsSEXP, SEXP possGenotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type margPrevs(margPrevsSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type possGenotypes(possGenotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(calPrevalences(margPrevs, possGenotypes));
    return rcpp_result_gen;
END_RCPP
}
// calAntProb
arma::Row<double> calAntProb(int idx, const arma::Mat<int>& idMatrix, const arma::Mat<int>& mates, const arma::Cube<int>& children, const arma::Mat<double>& prevalence, const arma::Mat<double>& likelihood, const arma::Cube<double>& transition, arma::Mat<double>& antProb, arma::Cube<double>& postProb);
RcppExport SEXP _PanelPRO_calAntProb(SEXP idxSEXP, SEXP idMatrixSEXP, SEXP matesSEXP, SEXP childrenSEXP, SEXP prevalenceSEXP, SEXP likelihoodSEXP, SEXP transitionSEXP, SEXP antProbSEXP, SEXP postProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type mates(matesSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type likelihood(likelihoodSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type antProb(antProbSEXP);
    Rcpp::traits::input_parameter< arma::Cube<double>& >::type postProb(postProbSEXP);
    rcpp_result_gen = Rcpp::wrap(calAntProb(idx, idMatrix, mates, children, prevalence, likelihood, transition, antProb, postProb));
    return rcpp_result_gen;
END_RCPP
}
// calPostProb
arma::Row<double> calPostProb(int idx, int mateIdx, const arma::Mat<int>& idMatrix, const arma::Mat<int>& mates, const arma::Cube<int>& children, const arma::Mat<double>& prevalence, const arma::Mat<double>& likelihood, const arma::Cube<double>& transition, arma::Mat<double>& antProb, arma::Cube<double>& postProb);
RcppExport SEXP _PanelPRO_calPostProb(SEXP idxSEXP, SEXP mateIdxSEXP, SEXP idMatrixSEXP, SEXP matesSEXP, SEXP childrenSEXP, SEXP prevalenceSEXP, SEXP likelihoodSEXP, SEXP transitionSEXP, SEXP antProbSEXP, SEXP postProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type mateIdx(mateIdxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type mates(matesSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type likelihood(likelihoodSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type antProb(antProbSEXP);
    Rcpp::traits::input_parameter< arma::Cube<double>& >::type postProb(postProbSEXP);
    rcpp_result_gen = Rcpp::wrap(calPostProb(idx, mateIdx, idMatrix, mates, children, prevalence, likelihood, transition, antProb, postProb));
    return rcpp_result_gen;
END_RCPP
}
// peelingParing
arma::Mat<double> peelingParing(arma::Col<int> probandIdxs, const arma::Mat<int>& idMatrix, const arma::Mat<int>& mates, const arma::Cube<int>& children, const arma::Mat<double>& prevalence, const arma::Mat<double>& likelihood, const arma::Cube<double>& transition, arma::Mat<double>& antProb, arma::Cube<double>& postProb);
RcppExport SEXP _PanelPRO_peelingParing(SEXP probandIdxsSEXP, SEXP idMatrixSEXP, SEXP matesSEXP, SEXP childrenSEXP, SEXP prevalenceSEXP, SEXP likelihoodSEXP, SEXP transitionSEXP, SEXP antProbSEXP, SEXP postProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int> >::type probandIdxs(probandIdxsSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type mates(matesSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type likelihood(likelihoodSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<double>& >::type transition(transitionSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type antProb(antProbSEXP);
    Rcpp::traits::input_parameter< arma::Cube<double>& >::type postProb(postProbSEXP);
    rcpp_result_gen = Rcpp::wrap(peelingParing(probandIdxs, idMatrix, mates, children, prevalence, likelihood, transition, antProb, postProb));
    return rcpp_result_gen;
END_RCPP
}
// getFatherIdx
int getFatherIdx(int idx, const arma::Mat<int>& idMatrix);
RcppExport SEXP _PanelPRO_getFatherIdx(SEXP idxSEXP, SEXP idMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(getFatherIdx(idx, idMatrix));
    return rcpp_result_gen;
END_RCPP
}
// getMotherIdx
int getMotherIdx(int idx, const arma::Mat<int>& idMatrix);
RcppExport SEXP _PanelPRO_getMotherIdx(SEXP idxSEXP, SEXP idMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(getMotherIdx(idx, idMatrix));
    return rcpp_result_gen;
END_RCPP
}
// getSibsIdxs
arma::Col<int> getSibsIdxs(int idx, const arma::Mat<int>& idMatrix, const arma::Cube<int>& children);
RcppExport SEXP _PanelPRO_getSibsIdxs(SEXP idxSEXP, SEXP idMatrixSEXP, SEXP childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type idMatrix(idMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type children(childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(getSibsIdxs(idx, idMatrix, children));
    return rcpp_result_gen;
END_RCPP
}
// getMatesIdxs
arma::Col<int> getMatesIdxs(int idx, const arma::Mat<int>& mates);
RcppExport SEXP _PanelPRO_getMatesIdxs(SEXP idxSEXP, SEXP matesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type mates(matesSEXP);
    rcpp_result_gen = Rcpp::wrap(getMatesIdxs(idx, mates));
    return rcpp_result_gen;
END_RCPP
}
// getOtherMatesIdxs
arma::Col<int> getOtherMatesIdxs(int idx, int mateIdx, const arma::Mat<int>& mates);
RcppExport SEXP _PanelPRO_getOtherMatesIdxs(SEXP idxSEXP, SEXP mateIdxSEXP, SEXP matesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type mateIdx(mateIdxSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type mates(matesSEXP);
    rcpp_result_gen = Rcpp::wrap(getOtherMatesIdxs(idx, mateIdx, mates));
    return rcpp_result_gen;
END_RCPP
}
// getChildrenIdxs
arma::Col<int> getChildrenIdxs(int idx, int mateIdx, const arma::Cube<int>& children);
RcppExport SEXP _PanelPRO_getChildrenIdxs(SEXP idxSEXP, SEXP mateIdxSEXP, SEXP childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type mateIdx(mateIdxSEXP);
    Rcpp::traits::input_parameter< const arma::Cube<int>& >::type children(childrenSEXP);
    rcpp_result_gen = Rcpp::wrap(getChildrenIdxs(idx, mateIdx, children));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PanelPRO_calInheritanceProb", (DL_FUNC) &_PanelPRO_calInheritanceProb, 1},
    {"_PanelPRO_calPrevalences", (DL_FUNC) &_PanelPRO_calPrevalences, 2},
    {"_PanelPRO_calAntProb", (DL_FUNC) &_PanelPRO_calAntProb, 9},
    {"_PanelPRO_calPostProb", (DL_FUNC) &_PanelPRO_calPostProb, 10},
    {"_PanelPRO_peelingParing", (DL_FUNC) &_PanelPRO_peelingParing, 9},
    {"_PanelPRO_getFatherIdx", (DL_FUNC) &_PanelPRO_getFatherIdx, 2},
    {"_PanelPRO_getMotherIdx", (DL_FUNC) &_PanelPRO_getMotherIdx, 2},
    {"_PanelPRO_getSibsIdxs", (DL_FUNC) &_PanelPRO_getSibsIdxs, 3},
    {"_PanelPRO_getMatesIdxs", (DL_FUNC) &_PanelPRO_getMatesIdxs, 2},
    {"_PanelPRO_getOtherMatesIdxs", (DL_FUNC) &_PanelPRO_getOtherMatesIdxs, 3},
    {"_PanelPRO_getChildrenIdxs", (DL_FUNC) &_PanelPRO_getChildrenIdxs, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PanelPRO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
