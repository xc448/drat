% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkFam.R
\name{checkFam}
\alias{checkFam}
\title{Check and make corrections to pedigree}
\usage{
checkFam(
  ped,
  db = NULL,
  proband = NULL,
  unknown.race = UNKNOWN_RACE,
  unknown.ancestry = UNKNOWN_ANCESTRY,
  ignore.proband.germ = FALSE,
  allow.age.zero = FALSE,
  impute.missing.ages = TRUE,
  impute.times = 20,
  max.iter.tries = NULL,
  random.seed = 42L
)
}
\arguments{
\item{ped}{A pedigree data frame. (See the description of the \code{pedigree}
parameter in the \code{\link{PanelPRO}} master function documentation.)}

\item{db}{A model-specific database returned by \code{\link{buildDatabase}}.
The default is \code{NULL}, in which case the database will be constructed based
on the cancer information encoded in \code{ped} and the genes in \code{GENE_TYPES}.}

\item{proband}{A numeric value or vector of the unique IDs in \code{ped}
corresponding to the proband(s). The default is \code{NULL}, in which case
probands will be inferred from the \code{isProband} column in \code{ped}, if it exists
and is valid. Otherwise, the IDs in \code{proband} will override the contents of
\code{ped$isProband}. The user can also specify \code{proband = "All"}, in which case
all IDs in the \code{ped} will be treated as probands.}

\item{unknown.race}{A character string indicating the default race to use
when \code{ped$race} is missing or unsupported. The default is
\code{PanelPRO:::UNKNOWN_RACE}.}

\item{unknown.ancestry}{A character string indicating the default ancestry
to use when \code{ped$Ancestry} is missing or unsupported. The default is
\code{PanelPRO:::UNKNOWN_ANCESTRY}.}

\item{ignore.proband.germ}{A logical value indicating if the proband(s)'s
germline testing results (if provided in \code{ped}) should be considered. The
default is \code{FALSE}, in which case the proband(s)'s germline testing results
will not be ignored.}

\item{allow.age.zero}{A logical value indicating whether zero ages can be
reported in \code{ped}. The default is \code{FALSE}, in which case \code{0} values in age
columns will be treated as missing and imputed. \code{allow.age.zero} should only
be \code{TRUE} if individuals are confirmed to born with a cancer. Currently, the
\code{allow.age.zero = TRUE} is not supported behavior for the \code{PanelPRO} model
functions.}

\item{impute.missing.ages}{A logical value indicating whether missing ages
should be multiply imputed. The default is \code{TRUE}. If set to \code{FALSE}, an
error will be raised if any individuals have missing current or cancer
affection ages.}

\item{impute.times}{A numeric value indicating the number of iterations that
should be run when multiply imputing missing ages. The default is \code{20}.}

\item{max.iter.tries}{A numeric value indicating the maximum number of
iterations that should be attempted when multiply imputing missing ages.
(Invalid iterations typically occur when an individual is missing both their
current and cancer ages. Current ages for living individuals are imputed
first; if a valid cancer affection cannot be found, subject to the upper
bound set by the imputed current age, this imputation run will be
discarded.) The default is \code{NULL}, in which case the maximum number of
tries will be set to five times \code{iterations}.}

\item{random.seed}{The random seed (a numeric value) to set for imputing
missing ages. The default is \code{42L}.}
}
\value{
A list with three components:
\itemize{
\item \code{lms}: A nested list where each component corresponds to the imputed ages
for a connected pedigree in \code{ped_list}. Each component is itself a list
where each component is a matrix of imputed ages corresponding to \code{CurAge}
(if one or more individuals in \code{ped} is missing their current age) or
\code{AgeX}, where \code{X} is a cancer for which one or more individuals in \code{ped}
is missing the affection age. Each matrix has \code{impute_times} rows; the
column names are the IDs of the individuals for whom ages were imputed.
\item \code{proband}: A numeric value or vector of the unique IDs in the pedigree
corresponding to the proband(s). If the \code{proband} argument was specified by
the user, the returned list component will be identical. Otherwise, the IDs
will correspond to individuals in the \code{ped} argument where
\code{ped$isProband == 1}.
\item \code{ped_list}: A list where each element is a connected pedigree that is a
subset of the relatives in \code{ped}. Typically, \code{ped_list} has length \code{1},
unless there are multiple probands who are related to multiple disconnected
pedigrees. Relatives who are not connected to the proband(s) will be removed.
}
}
\description{
Check and make corrections to pedigree
}
\details{
First, \code{checkFam} checks that all required columns in pedigree are present,
valid, and consistent, printing informative error/warning messages and
making corrections when possible. It also removes family members that are
not connected to the proband(s) and splits the pedigree into connected
sub-families, if necessary. For more details, see the
\code{\link{.pedStructureCheck}} documentation.

Second, \code{checkFam} imputes missing current, cancer affection, and death
ages for relatives in \code{ped}, subject to age-bounding information. For more
details, see the \code{\link{ageImpute}} documentation.
}
\examples{
# Build database for specific model configurations
brcadb <- buildDatabase(genes = c("BRCA1", "BRCA2"), 
                         cancers = c("Breast", "Ovarian"))
# Run pedigree checks and age imputations
checkFam(ped = test_fam_1, db = brcadb)
}
\seealso{
\code{\link{.pedStructureCheck}}, \code{\link{ageImpute}}

Other check: 
\code{\link{.boundAffectionAges}()},
\code{\link{.checkGender}()},
\code{\link{.checkHeredity}()},
\code{\link{.checkMating}()},
\code{\link{.checkTwins}()},
\code{\link{.findIDs}()},
\code{\link{.fix_gender_cancer}()},
\code{\link{.getOtherRels}()},
\code{\link{.getSpouses}()},
\code{\link{.pedStructureCheck}()},
\code{\link{.removeDisconnected}()}

Other impute: 
\code{\link{.boundAgeFromRelatives}()},
\code{\link{.cancerAgeImpute}()},
\code{\link{.currentAgeImpute}()},
\code{\link{.firstDegreeRelative}()},
\code{\link{.getAgeFromPed}()},
\code{\link{.secondDegreeRelative}()},
\code{\link{ageImpute}()}
}
\concept{check}
\concept{impute}
